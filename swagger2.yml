swagger: '2.0'
info:
  description: API for retrieving and managing product details.
  title: Product API
  version: 1.0.0
host: 'localhost:3000'
basePath: /
schemes:
  - http
paths:
  /products:
    delete:
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - description: The ID of the product to be deleted.
          in: body
          name: body
          required: true
          schema:
            properties:
              id:
                description: The unique ID of the product to delete.
                example: 8
                type: integer
            required:
              - id
      responses:
        '200':
          description: Product deleted successfully.
          schema:
            properties:
              message:
                example: Product removed successfully
                type: string
            type: object
      description: Delete a product using its unique ID.
      summary: Delete product by ID
    get:
      produces:
        - application/json; charset=utf-8
      parameters: []
      responses:
        '200':
          description: A list of products.
          schema:
            items:
              $ref: '#/definitions/Product'
            type: array
      description: Retrieve a list of all available products.
      summary: Get all products
    post:
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - description: Product object to be created.
          in: body
          name: body
          required: true
          schema:
            properties:
              categories:
                description: Product categories
                example:
                  - Category 1
                  - Category 2
                type: array
              description:
                description: the descriptiuon of the product
                example: Dummy description
                type: string
              inStock:
                description: Tells you if the product is in stock or not
                example: true
                type: boolean
              name:
                description: The name of the product
                example: New Product
                type: string
              price:
                description: product price
                example: 99.99
                type: number
              ratings:
                description: Product rating
                example: 4.2
                type: number
            required:
              - name
              - description
              - price
              - inStock
              - categories
              - ratings
            type: object
      responses:
        '201':
          description: Product created successfully.
          schema:
            properties:
              message:
                example: Product created successfully
                type: string
              product:
                $ref: '#/definitions/Product'
            type: object
      description: Add a new product to the system.
      summary: Create a new product
    put:
      consumes:
        - application/json
      produces:
        - application/json; charset=utf-8
      parameters:
        - description: 'Product details to be updated, including ID and name.'
          in: body
          name: body
          required: true
          schema:
            properties:
              id:
                description: The unique ID of the product to update.
                example: 1
                type: integer
              name:
                description: The new name for the product.
                example: Updated Product Name
                type: string
            required:
              - id
              - name
      responses:
        '200':
          description: Product updated successfully.
          schema:
            properties:
              message:
                example: Product updated successfully
                type: string
            type: object
      description: Update product name using product ID.
      summary: Update product name by ID
  '/products/{id}':
    get:
      produces:
        - application/json; charset=utf-8
      parameters:
        - description: The ID of the product.
          enum:
            - 1
            - 2
          in: path
          name: id
          required: true
          type: integer
      responses:
        '200':
          description: The product details.
          schema:
            $ref: '#/definitions/Product'
      description: Retrieve a product by its unique ID.
      summary: Get product by ID
definitions:
  Product:
    additionalProperties: false
    properties:
      categories:
        description: List of categories the product belongs to.
        items:
          type: string
        type: array
      description:
        description: Brief description of the product.
        type: string
      id:
        description: Unique identifier for the product.
        type: integer
      inStock:
        description: Indicates if the product is in stock.
        type: boolean
      name:
        description: Name of the product.
        type: string
      price:
        description: Price of the product.
        type: number
      ratings:
        description: Average customer rating for the product.
        type: number
    required:
      - id
      - name
      - description
      - price
      - inStock
      - categories
      - ratings
    type: object
x-components: {}
