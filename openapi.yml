openapi: 3.0.0
info:
  title: Product API
  description: API for retrieving and managing product details.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local server

paths:
  /products:
    get:
      summary: Get all products
      description: Retrieve a list of all available products.
      responses:
        '200':
          description: A list of products.
          content:
            application/json; charset=utf-8:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      summary: Create a new product
      description: Add a new product to the system.
      requestBody:
        description: Product object to be created.
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  description: 'The name of the product'
                  type: string
                  example: "New Product"
                description:
                  description: 'the descriptiuon of the product'
                  type: string
                  example: "Dummy description"
                price:
                  description: 'product price'
                  type: number
                  example: 99.99
                inStock:
                  description: 'Tells you if the product is in stock or not'
                  type: boolean
                  example: true
                categories:
                  description: 'Product categories'
                  type: array
                  example:
                    - Category 1
                    - Category 2
                ratings:
                  description: "Product rating"
                  type: number
                  example: 4.2      
              required:
                - name
                - description
                - price
                - inStock
                - categories
                - ratings
              type: object
      responses:
        '201':
          description: Product created successfully.
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product created successfully"
                  product:
                    $ref: '#/components/schemas/Product'           
    put:
      summary: Update product name by ID
      description: Update product name using product ID.
      requestBody:
        description: Product details to be updated, including ID and name.
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  type: integer
                  description: 'The unique ID of the product to update.'
                  example: 1
                name:
                  type: string
                  description: 'The new name for the product.'
                  example: Updated Product Name
              required:
                - id
                - name
      responses:
        '200':
          description: Product updated successfully.
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product updated successfully"
    delete:
      summary: Delete product by ID
      description: Delete a product using its unique ID.
      requestBody:
        description: The ID of the product to be deleted.
        required: true
        content:
          application/json:
            schema:
              properties:
                id:
                  type: integer
                  description: 'The unique ID of the product to delete.'
                  example: 8
              required:
                - id
      responses:
        '200':
          description: Product deleted successfully.
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product removed successfully"
  /products/{id}:
    get:
      summary: Get product by ID
      description: Retrieve a product by its unique ID.
      parameters:
        - name: id
          in: path
          description: The ID of the product.
          required: true
          schema:
            type: integer
            enum: [1, 2]
      responses:
        '200':
          description: The product details.
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/Product'

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the product.
        name:
          type: string
          description: Name of the product.
        description:
          type: string
          description: Brief description of the product.
        price:
          type: number
          description: Price of the product.
        inStock:
          type: boolean
          description: Indicates if the product is in stock.
        categories:
          type: array
          items:
            type: string
          description: List of categories the product belongs to.
        ratings:
          type: number
          description: Average customer rating for the product.
      required:
        - id
        - name
        - description
        - price
        - inStock
        - categories
        - ratings
      additionalProperties: false
